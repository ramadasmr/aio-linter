#!/usr/bin/env bash
set -e

print_help_banner(){
cat <<EOF
Usage: aio-linter [directory|filename] <options>

Options:
  --dry                         	Dry run, to show commands without executing
  -h, --help                            Show Help

EOF
}

found_wrong_command_args(){
    print_help_banner
    exit 2
}

init_variables(){
    SEARCH_LIST=()
    LINT_LIST=()
    LIMITED_LINT_LIST=()
    DRYRUN=""
}

check_arg_is_valid_file(){
if [ -e "$1" ]; then
	echo "[`date`] running aio-linter on \"$1\" "
    SEARCH_LIST+=("$1")
else
	echo "ERROR: Provided path \"$1\" is invalid"
    echo ""
fi
}

parse_args(){
if [[ "$#" -gt 0 ]]; then
    while true
    do
    if [ -n "$1" ]; then
        case $1 in
        --dry)
            DRYRUN=YES
            shift
            ;;
        -h|--help)
            print_help_banner
            exit 0
            ;;
        -l|--limit)
            LIMIT_OPTS=$2
            LIMITED_LINT_LIST=($(echo $LIMIT_OPTS | tr ',' ' '))
            shift 2
        ;;
        *)
            check_arg_is_valid_file $1
	        shift
            ;;
        esac
    else
        break
    fi
    done
else
    found_wrong_command_args
fi
}

find_files_to_lint(){
    for file in $(find $SEARCHFILE)
    do
    case $file in
    *.sh)
        [[ " ${LINT_LIST[@]} " =~ "SHELL" ]] || LINT_LIST+=("SHELL")
        ;;
    *.py)
        [[ " ${LINT_LIST[@]} " =~ "PYTHON" ]] || LINT_LIST+=("PYTHON")
        ;;
    *.yaml|*.yml)
        [[ " ${LINT_LIST[@]} " =~ "YAML" ]] || LINT_LIST+=("YAML")
        ;;
    *.json)
        [[ " ${LINT_LIST[@]} " =~ "JSON" ]] || LINT_LIST+=("JSON")
        ;;
    esac
    done
    if [ ${#LIMITED_LINT_LIST[@]} -ne 0 ]; then
        TMP_LINT_LIST=()
        for LIMIT_TYPE in ${LIMITED_LINT_LIST[@]}
        do
        case $LIMIT_TYPE in
        sh|shell|bash)
            if [[ " ${LINT_LIST[@]} " =~ "SHELL" ]]; then
                [[ " ${TMP_LINT_LIST[@]} " =~ "SHELL" ]] || TMP_LINT_LIST+=("SHELL")
            fi
            ;;
        py|python)
            if [[ " ${LINT_LIST[@]} " =~ "PYTHON" ]]; then
                [[ " ${TMP_LINT_LIST[@]} " =~ "PYTHON" ]] || TMP_LINT_LIST+=("PYTHON")
            fi
            ;;
        yaml|yml)
            if [[ " ${LINT_LIST[@]} " =~ "YAML" ]]; then
                [[ " ${TMP_LINT_LIST[@]} " =~ "YAML" ]] || TMP_LINT_LIST+=("YAML")
            fi
            ;;
        json)
            if [[ " ${LINT_LIST[@]} " =~ "JSON" ]]; then
                [[ " ${TMP_LINT_LIST[@]} " =~ "JSON" ]] || TMP_LINT_LIST+=("JSON")
            fi
            ;;
        esac
        done
        LINT_LIST=(${TMP_LINT_LIST[@]})
    fi
}

perform_lint(){
    if [ ${#LINT_LIST[@]} -eq 0 ]; then
        echo "NO FILE TYPE ${LIMIT_OPTS[@]} found in $SEARCHFILE"
        return
    fi
    for LINT_TYPE in ${LINT_LIST[@]}
    do
        echo "LINTING -> $LINT_TYPE on $SEARCHFILE"
        case $LINT_TYPE in
        SHELL)
            find $SEARCHFILE -type f -name "*.sh" -exec shellcheck {} + || continue
            ;;
        YAML)
            find $SEARCHFILE -type f -name "*.yaml" -exec yamllint {} + || continue
            find $SEARCHFILE -type f -name "*.yml" -exec yamllint {} + || continue
            ;;
        JSON)
            find $SEARCHFILE -type f -name "*.json" -exec jsonlint {} + || continue
            ;;
        esac
    done
}

print_lint_outcome(){
    echo -n ""
}

check_command_exists(){
    COMMAND_NOT_FOUND=()
    if [ -z "$1" ]; then
        for COMMAND in ${LINT_COMMAND_LIST[@]}
        do
            if [[ ! $(command -v $COMMAND) ]]; then
                COMMAND_NOT_FOUND+=($COMMAND)
            fi
        done
        [[ ${#COMMAND_NOT_FOUND[@]} -eq 0 ]] || echo "Missing Commands, please install : ${COMMAND_NOT_FOUND[@]}"
        [[ ${#COMMAND_NOT_FOUND[@]} -eq 0 ]] || exit 1
    fi
}


run_linter(){
if [ ${#SEARCH_LIST[@]} -ne 0 ]; then
    for SEARCHFILE in ${SEARCH_LIST[@]}
    do
        SEARCHFILE=$(readlink -f $SEARCHFILE)
        find_files_to_lint
        perform_lint
        print_lint_outcome
        LINT_LIST=()
    done
else
    echo "No Action to perform, Provide valid file(s)/directory"
fi
}

#
# main
#

LINT_COMMAND_LIST=(shellcheck pylint yamllint jsonlint)
init_variables
parse_args $@
check_command_exists
run_linter
